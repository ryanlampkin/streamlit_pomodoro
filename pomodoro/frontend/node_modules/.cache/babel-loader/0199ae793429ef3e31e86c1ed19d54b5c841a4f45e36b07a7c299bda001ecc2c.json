{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamlit_pomodoro\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Hello, \", name, \"! \\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          style: style,\n          onClick: this.onClicked,\n          disabled: this.props.disabled,\n          onFocus: this._onFocus,\n          onBlur: this._onBlur,\n          children: \"Click Me!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this);\n    };\n    /** Click handler for our \"Click Me!\" button. */\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n    /** Focus handler for our \"Click Me!\" button. */\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    /** Blur handler for our \"Click Me!\" button. */\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","numClicks","isFocused","render","name","props","theme","style","borderStyling","primaryColor","border","outline","children","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","fileName","_jsxFileName","lineNumber","columnNumber","setState","prevState","setComponentValue","_c","$RefreshReg$"],"sources":["C:/repos/streamlit_pomodoro/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\n\r\ninterface State {\r\n  numClicks: number\r\n  isFocused: boolean\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass MyComponent extends StreamlitComponentBase<State> {\r\n  public state = { numClicks: 0, isFocused: false }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const name = this.props.args[\"name\"]\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <span>\r\n        Hello, {name}! &nbsp;\r\n        <button\r\n          style={style}\r\n          onClick={this.onClicked}\r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}\r\n        >\r\n          Click Me!\r\n        </button>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClicked = (): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    this.setState(\r\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\r\n      () => Streamlit.setComponentValue(this.state.numClicks)\r\n    )\r\n  }\r\n\r\n  /** Focus handler for our \"Click Me!\" button. */\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  /** Blur handler for our \"Click Me!\" button. */\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":";AAAA,SACEA,SAAS,EACTC,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOxC;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASL,sBAAsB,CAAQ;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC/CC,KAAK,GAAG;MAAEC,SAAS,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAM,CAAC;IAAA,KAE1CC,MAAM,GAAG,MAAiB;MAC/B;MACA;MACA,MAAMC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC,MAAM,CAAC;;MAEpC;MACA;MACA;MACA,MAAM;QAAEO;MAAM,CAAC,GAAG,IAAI,CAACD,KAAK;MAC5B,MAAME,KAA0B,GAAG,CAAC,CAAC;;MAErC;MACA;MACA,IAAID,KAAK,EAAE;QACT;QACA;QACA,MAAME,aAAa,GAAG,aACpB,IAAI,CAACR,KAAK,CAACE,SAAS,GAAGI,KAAK,CAACG,YAAY,GAAG,MAAM,EAClD;QACFF,KAAK,CAACG,MAAM,GAAGF,aAAa;QAC5BD,KAAK,CAACI,OAAO,GAAGH,aAAa;MAC/B;;MAEA;MACA;MACA;MACA;MACA,oBACEZ,OAAA;QAAAgB,QAAA,GAAM,SACG,EAACR,IAAI,EAAC,QACb,eAAAR,OAAA;UACEW,KAAK,EAAEA,KAAM;UACbM,OAAO,EAAE,IAAI,CAACC,SAAU;UACxBC,QAAQ,EAAE,IAAI,CAACV,KAAK,CAACU,QAAS;UAC9BC,OAAO,EAAE,IAAI,CAACC,QAAS;UACvBC,MAAM,EAAE,IAAI,CAACC,OAAQ;UAAAP,QAAA,EACtB;QAED;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAEX,CAAC;IAED;IAAA,KACQT,SAAS,GAAG,MAAY;MAC9B;MACA;MACA,IAAI,CAACU,QAAQ,CACXC,SAAS,KAAK;QAAExB,SAAS,EAAEwB,SAAS,CAACxB,SAAS,GAAG;MAAE,CAAC,CAAC,EACrD,MAAMV,SAAS,CAACmC,iBAAiB,CAAC,IAAI,CAAC1B,KAAK,CAACC,SAAS,CACxD,CAAC;IACH,CAAC;IAED;IAAA,KACQgB,QAAQ,GAAG,MAAY;MAC7B,IAAI,CAACO,QAAQ,CAAC;QAAEtB,SAAS,EAAE;MAAK,CAAC,CAAC;IACpC,CAAC;IAED;IAAA,KACQiB,OAAO,GAAG,MAAY;MAC5B,IAAI,CAACK,QAAQ,CAAC;QAAEtB,SAAS,EAAE;MAAM,CAAC,CAAC;IACrC,CAAC;EAAA;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAAyB,EAAA,GAAelC,uBAAuB,CAACI,WAAW,CAAC;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}