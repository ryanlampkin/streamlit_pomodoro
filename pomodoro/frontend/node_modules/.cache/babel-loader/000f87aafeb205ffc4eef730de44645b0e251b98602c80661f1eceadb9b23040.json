{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamlit_pomodoro\\\\pomodoro\\\\frontend\\\\src\\\\PomodoroTimer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PomodoroTimer = props => {\n  _s();\n  const {\n    work_duration,\n    break_duration\n  } = props.args;\n  const [isRunning, setIsRunning] = useState(false);\n  const [isWorkTime, setIsWorkTime] = useState(true);\n  const [timeLeft, setTimeLeft] = useState(work_duration * 60);\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n  useEffect(() => {\n    let interval = null;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            setIsWorkTime(prev => !prev);\n            return isWorkTime ? break_duration * 60 : work_duration * 60;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    } else if (interval) {\n      clearInterval(interval);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isRunning, isWorkTime, work_duration, break_duration]);\n  const toggleTimer = () => {\n    setIsRunning(prev => !prev);\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n  const calculateProgress = () => {\n    const totalTime = isWorkTime ? work_duration * 60 : break_duration * 60;\n    return (totalTime - timeLeft) / totalTime * 100;\n  };\n  Streamlit.setComponentValue({\n    isRunning,\n    isWorkTime,\n    timeLeft\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"200px\",\n      height: \"200px\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"200\",\n      height: \"200\",\n      viewBox: \"0 0 200 200\",\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"100\",\n        cy: \"100\",\n        r: \"90\",\n        fill: \"none\",\n        stroke: \"#e0e0e0\",\n        strokeWidth: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"100\",\n        cy: \"100\",\n        r: \"90\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"10\",\n        strokeDasharray: \"565.48\",\n        strokeDashoffset: 565.48 - 565.48 * calculateProgress() / 100,\n        transform: \"rotate(-90 100 100)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          margin: 0\n        },\n        children: formatTime(timeLeft)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: \"5px 0\"\n        },\n        children: isWorkTime ? \"Work\" : \"Break\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTimer,\n        children: isRunning ? \"Pause\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(PomodoroTimer, \"cllNabHYbuQhXylyJlMopETa3ns=\");\n_c = PomodoroTimer;\nexport default _c2 = withStreamlitConnection(PomodoroTimer);\nvar _c, _c2;\n$RefreshReg$(_c, \"PomodoroTimer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","Streamlit","withStreamlitConnection","jsxDEV","_jsxDEV","PomodoroTimer","props","_s","work_duration","break_duration","args","isRunning","setIsRunning","isWorkTime","setIsWorkTime","timeLeft","setTimeLeft","setFrameHeight","interval","setInterval","prevTime","prev","clearInterval","toggleTimer","formatTime","seconds","mins","Math","floor","secs","toString","padStart","calculateProgress","totalTime","setComponentValue","style","width","height","position","children","viewBox","cx","cy","r","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","color","strokeDasharray","strokeDashoffset","transform","top","left","textAlign","margin","onClick","_c","_c2","$RefreshReg$"],"sources":["C:/repos/streamlit_pomodoro/pomodoro/frontend/src/PomodoroTimer.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\n\r\nconst PomodoroTimer = (props: ComponentProps) => {\r\n  const { work_duration, break_duration } = props.args\r\n  const [isRunning, setIsRunning] = useState(false)\r\n  const [isWorkTime, setIsWorkTime] = useState(true)\r\n  const [timeLeft, setTimeLeft] = useState(work_duration * 60)\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n  })\r\n\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout | null = null\r\n    if (isRunning) {\r\n      interval = setInterval(() => {\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            setIsWorkTime((prev) => !prev)\r\n            return isWorkTime ? break_duration * 60 : work_duration * 60\r\n          }\r\n          return prevTime - 1\r\n        })\r\n      }, 1000)\r\n    } else if (interval) {\r\n      clearInterval(interval)\r\n    }\r\n    return () => {\r\n      if (interval) clearInterval(interval)\r\n    }\r\n  }, [isRunning, isWorkTime, work_duration, break_duration])\r\n\r\n  const toggleTimer = () => {\r\n    setIsRunning((prev) => !prev)\r\n  }\r\n\r\n  const formatTime = (seconds: number) => {\r\n    const mins = Math.floor(seconds / 60)\r\n    const secs = seconds % 60\r\n    return `${mins.toString().padStart(2, \"0\")}:${secs\r\n      .toString()\r\n      .padStart(2, \"0\")}`\r\n  }\r\n\r\n  const calculateProgress = () => {\r\n    const totalTime = isWorkTime ? work_duration * 60 : break_duration * 60;\r\n    return ((totalTime - timeLeft) / totalTime) * 100;\r\n  };\r\n\r\n  Streamlit.setComponentValue({ isRunning, isWorkTime, timeLeft });\r\n\r\n  return (\r\n    <div style={{ width: \"200px\", height: \"200px\", position: \"relative\" }}>\r\n      <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\r\n        <circle\r\n          cx=\"100\"\r\n          cy=\"100\"\r\n          r=\"90\"\r\n          fill=\"none\"\r\n          stroke=\"#e0e0e0\"\r\n          strokeWidth=\"10\"\r\n        />\r\n        <circle\r\n          cx=\"100\"\r\n          cy=\"100\"\r\n          r=\"90\"\r\n          fill=\"none\"\r\n          stroke={color}\r\n          strokeWidth=\"10\"\r\n          strokeDasharray=\"565.48\"\r\n          strokeDashoffset={565.48 - (565.48 * calculateProgress()) / 100}\r\n          transform=\"rotate(-90 100 100)\"\r\n        />\r\n      </svg>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <h2 style={{ margin: 0 }}>{formatTime(timeLeft)}</h2>\r\n        <p style={{ margin: \"5px 0\" }}>{isWorkTime ? \"Work\" : \"Break\"}</p>\r\n        <button onClick={toggleTimer}>{isRunning ? \"Pause\" : \"Start\"}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStreamlitConnection(PomodoroTimer)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}