{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamlit_pomodoro\\\\pomodoro\\\\frontend\\\\src\\\\PomodoroTimer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PomodoroTimer = props => {\n  _s();\n  const {\n    work_duration,\n    break_duration\n  } = props.args;\n  const [isRunning, setIsRunning] = useState(false);\n  const [isWorkTime, setIsWorkTime] = useState(true);\n  const [timeLeft, setTimeLeft] = useState(work_duration * 60);\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n  useEffect(() => {\n    let interval = null;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            setIsWorkTime(prev => !prev);\n            return isWorkTime ? break_duration * 60 : work_duration * 60;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    } else if (interval) {\n      clearInterval(interval);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isRunning, isWorkTime, work_duration, break_duration]);\n  const toggleTimer = () => {\n    setIsRunning(prev => !prev);\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n  Streamlit.setComponentValue({\n    isRunning,\n    isWorkTime,\n    timeLeft\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isWorkTime ? \"Work Time\" : \"Break Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: formatTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleTimer,\n      children: isRunning ? \"Pause\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(PomodoroTimer, \"cllNabHYbuQhXylyJlMopETa3ns=\");\n_c = PomodoroTimer;\nexport default _c2 = withStreamlitConnection(PomodoroTimer);\nvar _c, _c2;\n$RefreshReg$(_c, \"PomodoroTimer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","Streamlit","withStreamlitConnection","jsxDEV","_jsxDEV","PomodoroTimer","props","_s","work_duration","break_duration","args","isRunning","setIsRunning","isWorkTime","setIsWorkTime","timeLeft","setTimeLeft","setFrameHeight","interval","setInterval","prevTime","prev","clearInterval","toggleTimer","formatTime","seconds","mins","Math","floor","secs","toString","padStart","setComponentValue","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","_c2","$RefreshReg$"],"sources":["C:/repos/streamlit_pomodoro/pomodoro/frontend/src/PomodoroTimer.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\n\r\nconst PomodoroTimer = (props: ComponentProps) => {\r\n  const { work_duration, break_duration } = props.args\r\n  const [isRunning, setIsRunning] = useState(false)\r\n  const [isWorkTime, setIsWorkTime] = useState(true)\r\n  const [timeLeft, setTimeLeft] = useState(work_duration * 60)\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n  })\r\n\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout | null = null\r\n    if (isRunning) {\r\n      interval = setInterval(() => {\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            setIsWorkTime((prev) => !prev)\r\n            return isWorkTime ? break_duration * 60 : work_duration * 60\r\n          }\r\n          return prevTime - 1\r\n        })\r\n      }, 1000)\r\n    } else if (interval) {\r\n      clearInterval(interval)\r\n    }\r\n    return () => {\r\n      if (interval) clearInterval(interval)\r\n    }\r\n  }, [isRunning, isWorkTime, work_duration, break_duration])\r\n\r\n  const toggleTimer = () => {\r\n    setIsRunning((prev) => !prev)\r\n  }\r\n\r\n  const formatTime = (seconds: number) => {\r\n    const mins = Math.floor(seconds / 60)\r\n    const secs = seconds % 60\r\n    return `${mins.toString().padStart(2, \"0\")}:${secs\r\n      .toString()\r\n      .padStart(2, \"0\")}`\r\n  }\r\n\r\n  Streamlit.setComponentValue({ isRunning, isWorkTime, timeLeft })\r\n\r\n  return (\r\n    <div>\r\n      <h2>{isWorkTime ? \"Work Time\" : \"Break Time\"}</h2>\r\n      <h3>{formatTime(timeLeft)}</h3>\r\n      <button onClick={toggleTimer}>{isRunning ? \"Pause\" : \"Start\"}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(PomodoroTimer)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}