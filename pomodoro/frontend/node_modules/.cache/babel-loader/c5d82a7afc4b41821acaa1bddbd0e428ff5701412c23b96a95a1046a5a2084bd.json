{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamlit_pomodoro\\\\pomodoro\\\\frontend\\\\src\\\\PomodoroTimer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport PauseIcon from '@mui/icons-material/Pause';\nimport StopIcon from '@mui/icons-material/Stop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PomodoroTimer = props => {\n  _s();\n  const {\n    work_duration,\n    break_duration,\n    workLabel = \"Work\",\n    breakLabel = \"Break\",\n    textColor = \"skyblue\",\n    size = 250,\n    strokeWidthInput = 1\n  } = props.args; // Default strokeWidthInput set to 5\n  const strokeColor = props.args.strokeColor || \"#593773\"; // Default color\n  const [isRunning, setIsRunning] = useState(false);\n  const [isWorkTime, setIsWorkTime] = useState(true);\n  const [timeLeft, setTimeLeft] = useState(work_duration * 60 * 10); // Store time in tenths of a second\n  const [cycleCount, setCycleCount] = useState(0);\n  const maxCycles = 4; // Set the maximum number of cycles\n\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n  useEffect(() => {\n    let interval = null;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            if (isWorkTime) {\n              setCycleCount(prevCount => prevCount + 1);\n            }\n            setIsWorkTime(prev => !prev);\n            return isWorkTime ? break_duration * 60 * 10 : work_duration * 60 * 10;\n          }\n          return prevTime - 1; // Decrement by 1 tenth of a second\n        });\n      }, 100); // Update every 100 milliseconds (0.1 seconds)\n    } else if (interval) {\n      clearInterval(interval);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isRunning, isWorkTime, work_duration, break_duration]);\n  useEffect(() => {\n    if (cycleCount >= maxCycles) {\n      setIsRunning(false); // Stop the timer after max cycles\n      Streamlit.setComponentValue({\n        isRunning,\n        isWorkTime,\n        timeLeft,\n        cycleCount\n      });\n    }\n  }, [cycleCount]);\n  const toggleTimer = () => {\n    setIsRunning(prev => !prev);\n    // Send the state to the server when the timer is toggled\n    Streamlit.setComponentValue({\n      isRunning,\n      isWorkTime,\n      timeLeft,\n      cycleCount\n    });\n  };\n  const formatTime = tenths => {\n    const totalSeconds = Math.floor(tenths / 10);\n    const mins = Math.floor(totalSeconds / 60);\n    const secs = totalSeconds % 60;\n    const tenthsDisplay = tenths % 10;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}.${tenthsDisplay.toString().padStart(1, \"0\")}`;\n  };\n  const calculateProgress = () => {\n    const totalTime = isWorkTime ? work_duration * 60 * 10 : break_duration * 60 * 10;\n    return (totalTime - timeLeft) / totalTime * 100;\n  };\n\n  // Send the state to the server when the timer ends\n  useEffect(() => {\n    if (timeLeft <= 0) {\n      Streamlit.setComponentValue({\n        isRunning,\n        isWorkTime,\n        timeLeft,\n        cycleCount\n      });\n    }\n  }, [timeLeft]);\n  const strokeWidth = Math.min(Math.max(strokeWidthInput, 1), 50) / 100 * size; // Cap strokeWidth at 50\n  const radius = size / 2 - strokeWidth / 2; // Adjust radius based on strokeWidth\n  const strokeDasharray = 2 * Math.PI * radius; // Calculate circumference for stroke\n  const strokeDashoffset = strokeDasharray - strokeDasharray * calculateProgress() / 100; // Calculate stroke offset\n  const cappedSize = Math.min(size, window.innerWidth); // Calculate the lesser of size and 100vw\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: size,\n      height: size,\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: size,\n      height: size,\n      viewBox: `0 0 ${size} ${size}`,\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: size / 2,\n        cy: size / 2,\n        r: radius // Use adjusted radius\n        ,\n        fill: \"none\",\n        stroke: \"#e0e0e0\",\n        strokeWidth: strokeWidth // Updated stroke width\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: size / 2,\n        cy: size / 2,\n        r: radius // Use adjusted radius\n        ,\n        fill: \"none\",\n        stroke: strokeColor // Use the stroke color from props\n        ,\n        strokeWidth: strokeWidth // Updated stroke width\n        ,\n        strokeDasharray: strokeDasharray // Updated for new radius\n        ,\n        strokeDashoffset: strokeDashoffset // Updated stroke offset\n        ,\n        transform: `rotate(-90 ${size / 2} ${size / 2})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        textAlign: \"center\",\n        height: \"100%\",\n        // Full height for alignment\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\" // Center countdown and label\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          margin: 0,\n          color: textColor\n        },\n        children: formatTime(timeLeft)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          whiteSpace: 'nowrap',\n          // Prevents text from wrapping\n          overflowX: 'auto',\n          // Enables horizontal scrolling\n          overflowY: 'hidden',\n          // Hides vertical overflow\n          width: '100vw',\n          // Set a fixed width or adjust as needed\n          color: strokeColor,\n          padding: '5px',\n          // Optional padding\n          border: '0px solid #ccc' // Optional border\n        },\n        children: isWorkTime ? workLabel : breakLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        bottom: \"10px\",\n        // Align to the bottom of the container\n        left: \"50%\",\n        transform: \"translate(-50%, calc(-50%))\",\n        // Adjusted to lower the buttons\n        display: \"flex\",\n        justifyContent: \"center\",\n        gap: \"5px\" // Space between buttons\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTimer,\n        style: {\n          backgroundColor: \"white\",\n          // Make button transparent\n          border: \"none\",\n          borderRadius: \"12px\",\n          cursor: \"pointer\",\n          padding: 0 // Remove padding\n        },\n        children: [isRunning ? /*#__PURE__*/_jsxDEV(PauseIcon, {\n          style: {\n            fontSize: \"42px\",\n            color: \"#593773\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(PlayArrowIcon, {\n          style: {\n            fontSize: \"42px\",\n            color: \"#593773\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 87\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsRunning(false); // Stop functionality\n          Streamlit.setComponentValue({\n            isRunning: false,\n            isStopped: true,\n            isWorkTime,\n            timeLeft,\n            cycleCount\n          }); // Return all values including isStopped\n        },\n        style: {\n          backgroundColor: \"white\",\n          // Make button transparent\n          border: \"none\",\n          borderRadius: \"12px\",\n          cursor: \"pointer\",\n          padding: 0 // Remove padding\n        },\n        children: [/*#__PURE__*/_jsxDEV(StopIcon, {\n          style: {\n            fontSize: \"42px\",\n            color: \"#d9534f\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(PomodoroTimer, \"BfHOP88ExRjU31pJhAjBQwr5D68=\");\n_c = PomodoroTimer;\nexport default _c2 = withStreamlitConnection(PomodoroTimer);\nvar _c, _c2;\n$RefreshReg$(_c, \"PomodoroTimer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","Streamlit","withStreamlitConnection","PlayArrowIcon","PauseIcon","StopIcon","jsxDEV","_jsxDEV","PomodoroTimer","props","_s","work_duration","break_duration","workLabel","breakLabel","textColor","size","strokeWidthInput","args","strokeColor","isRunning","setIsRunning","isWorkTime","setIsWorkTime","timeLeft","setTimeLeft","cycleCount","setCycleCount","maxCycles","setFrameHeight","interval","setInterval","prevTime","prevCount","prev","clearInterval","setComponentValue","toggleTimer","formatTime","tenths","totalSeconds","Math","floor","mins","secs","tenthsDisplay","toString","padStart","calculateProgress","totalTime","strokeWidth","min","max","radius","strokeDasharray","PI","strokeDashoffset","cappedSize","window","innerWidth","style","width","height","position","children","viewBox","cx","cy","r","fill","stroke","fileName","_jsxFileName","lineNumber","columnNumber","transform","top","left","textAlign","display","flexDirection","justifyContent","margin","color","whiteSpace","overflowX","overflowY","padding","border","bottom","gap","onClick","backgroundColor","borderRadius","cursor","fontSize","isStopped","_c","_c2","$RefreshReg$"],"sources":["C:/repos/streamlit_pomodoro/pomodoro/frontend/src/PomodoroTimer.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport PauseIcon from '@mui/icons-material/Pause';\r\nimport StopIcon from '@mui/icons-material/Stop';\r\n\r\nconst PomodoroTimer = (props: ComponentProps) => {\r\n  const { work_duration, break_duration, workLabel = \"Work\", breakLabel = \"Break\", textColor = \"skyblue\", size = 250, strokeWidthInput = 1 } = props.args; // Default strokeWidthInput set to 5\r\n  const strokeColor = props.args.strokeColor || \"#593773\"; // Default color\r\n  const [isRunning, setIsRunning] = useState(false)\r\n  const [isWorkTime, setIsWorkTime] = useState(true)\r\n  const [timeLeft, setTimeLeft] = useState(work_duration * 60 * 10) // Store time in tenths of a second\r\n  const [cycleCount, setCycleCount] = useState(0)\r\n  const maxCycles = 4 // Set the maximum number of cycles\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n  })\r\n\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout | null = null\r\n    if (isRunning) {\r\n      interval = setInterval(() => {\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            if (isWorkTime) {\r\n              setCycleCount((prevCount) => prevCount + 1)\r\n            }\r\n            setIsWorkTime((prev) => !prev)\r\n            return isWorkTime ? break_duration * 60 * 10 : work_duration * 60 * 10\r\n          }\r\n          return prevTime - 1 // Decrement by 1 tenth of a second\r\n        })\r\n      }, 100) // Update every 100 milliseconds (0.1 seconds)\r\n    } else if (interval) {\r\n      clearInterval(interval)\r\n    }\r\n    return () => {\r\n      if (interval) clearInterval(interval)\r\n    }\r\n  }, [isRunning, isWorkTime, work_duration, break_duration])\r\n\r\n  useEffect(() => {\r\n    if (cycleCount >= maxCycles) {\r\n      setIsRunning(false) // Stop the timer after max cycles\r\n      Streamlit.setComponentValue({ isRunning, isWorkTime, timeLeft, cycleCount })\r\n    }\r\n  }, [cycleCount])\r\n\r\n  const toggleTimer = () => {\r\n    setIsRunning((prev) => !prev)\r\n    // Send the state to the server when the timer is toggled\r\n    Streamlit.setComponentValue({ isRunning, isWorkTime, timeLeft, cycleCount })\r\n  }\r\n\r\n  const formatTime = (tenths: number) => {\r\n    const totalSeconds = Math.floor(tenths / 10)\r\n    const mins = Math.floor(totalSeconds / 60)\r\n    const secs = totalSeconds % 60\r\n    const tenthsDisplay = tenths % 10\r\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}.${tenthsDisplay.toString().padStart(1, \"0\")}`\r\n  }\r\n\r\n  const calculateProgress = () => {\r\n    const totalTime = isWorkTime ? work_duration * 60 * 10 : break_duration * 60 * 10;\r\n    return ((totalTime - timeLeft) / totalTime) * 100;\r\n  };\r\n\r\n  // Send the state to the server when the timer ends\r\n  useEffect(() => {\r\n    if (timeLeft <= 0) {\r\n      Streamlit.setComponentValue({ isRunning, isWorkTime, timeLeft, cycleCount });\r\n    }\r\n  }, [timeLeft]);\r\n\r\n  const strokeWidth = Math.min(Math.max(strokeWidthInput, 1), 50) / 100 * size; // Cap strokeWidth at 50\r\n  const radius = (size / 2) - (strokeWidth / 2); // Adjust radius based on strokeWidth\r\n  const strokeDasharray = 2 * Math.PI * radius; // Calculate circumference for stroke\r\n  const strokeDashoffset = strokeDasharray - (strokeDasharray * calculateProgress()) / 100; // Calculate stroke offset\r\n  const cappedSize = Math.min(size, window.innerWidth); // Calculate the lesser of size and 100vw\r\n\r\n  return (\r\n    <div style={{ width: size, height: size, position: \"relative\" }}>\r\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius} // Use adjusted radius\r\n          fill=\"none\"\r\n          stroke=\"#e0e0e0\"\r\n          strokeWidth={strokeWidth} // Updated stroke width\r\n        />\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius} // Use adjusted radius\r\n          fill=\"none\"\r\n          stroke={strokeColor} // Use the stroke color from props\r\n          strokeWidth={strokeWidth} // Updated stroke width\r\n          strokeDasharray={strokeDasharray} // Updated for new radius\r\n          strokeDashoffset={strokeDashoffset} // Updated stroke offset\r\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\r\n        />\r\n      </svg>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          textAlign: \"center\",\r\n          height: \"100%\", // Full height for alignment\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\", // Center countdown and label\r\n        }}\r\n      >\r\n        <h2 style={{ margin: 0, color: textColor }}>{formatTime(timeLeft)}</h2>\r\n        <div style={{ \r\n          whiteSpace: 'nowrap', // Prevents text from wrapping\r\n          overflowX: 'auto',    // Enables horizontal scrolling\r\n          overflowY: 'hidden',   // Hides vertical overflow\r\n          width: '100vw',         // Set a fixed width or adjust as needed\r\n          color: strokeColor,\r\n          padding: '5px', // Optional padding\r\n          border: '0px solid #ccc' // Optional border\r\n        }}>\r\n          {isWorkTime ? workLabel : breakLabel}\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          bottom: \"10px\", // Align to the bottom of the container\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, calc(-50%))\", // Adjusted to lower the buttons\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          gap: \"5px\", // Space between buttons\r\n        }}\r\n      >\r\n        <button\r\n          onClick={toggleTimer}\r\n          style={{\r\n            backgroundColor: \"white\", // Make button transparent\r\n            border: \"none\",\r\n            borderRadius: \"12px\",\r\n            cursor: \"pointer\",\r\n            padding: 0, // Remove padding\r\n          }}\r\n        >\r\n          {isRunning ? <PauseIcon style={{ fontSize: \"42px\", color: \"#593773\" }} /> : <PlayArrowIcon style={{ fontSize: \"42px\", color: \"#593773\" }} />} {/* Material UI icons */}\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setIsRunning(false); // Stop functionality\r\n            Streamlit.setComponentValue({ isRunning: false, isStopped: true, isWorkTime, timeLeft, cycleCount }); // Return all values including isStopped\r\n          }}\r\n          style={{\r\n            backgroundColor: \"white\", // Make button transparent\r\n            border: \"none\",\r\n            borderRadius: \"12px\",\r\n            cursor: \"pointer\",\r\n            padding: 0, // Remove padding\r\n          }}\r\n        >\r\n          <StopIcon style={{ fontSize: \"42px\", color: \"#d9534f\" }} /> {/* Material UI Stop icon */}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStreamlitConnection(PomodoroTimer)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}