{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamlit_pomodoro\\\\pomodoro\\\\frontend\\\\src\\\\PomodoroTimer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PomodoroTimer = props => {\n  _s();\n  const {\n    work_duration,\n    break_duration,\n    strokeColor\n  } = props.args;\n  const [isRunning, setIsRunning] = useState(false);\n  const [isWorkTime, setIsWorkTime] = useState(true);\n  const [timeLeft, setTimeLeft] = useState(work_duration * 60 * 10); // Store time in tenths of a second\n  const [cycleCount, setCycleCount] = useState(0);\n  const maxCycles = 4; // Set the maximum number of cycles\n\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n  useEffect(() => {\n    let interval = null;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            if (isWorkTime) {\n              setCycleCount(prevCount => prevCount + 1);\n            }\n            setIsWorkTime(prev => !prev);\n            return isWorkTime ? break_duration * 60 : work_duration * 60;\n          }\n          return prevTime - 1; // Decrement by 1 second\n        });\n      }, 1000); // Update every 1000 milliseconds (1 second)\n    } else if (interval) {\n      clearInterval(interval);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isRunning, isWorkTime, work_duration, break_duration]);\n  useEffect(() => {\n    if (cycleCount >= maxCycles) {\n      setIsRunning(false); // Stop the timer after max cycles\n      Streamlit.setComponentValue({\n        isRunning,\n        isWorkTime,\n        timeLeft,\n        cycleCount\n      });\n    }\n  }, [cycleCount]);\n  const toggleTimer = () => {\n    setIsRunning(prev => !prev);\n    // Send the state to the server when the timer is toggled\n    Streamlit.setComponentValue({\n      isRunning,\n      isWorkTime,\n      timeLeft,\n      cycleCount\n    });\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n  const calculateProgress = () => {\n    const totalTime = isWorkTime ? work_duration * 60 : break_duration * 60;\n    return (totalTime - timeLeft) / totalTime * 100;\n  };\n\n  // Send the state to the server when the timer ends\n  useEffect(() => {\n    if (timeLeft <= 0) {\n      Streamlit.setComponentValue({\n        isRunning,\n        isWorkTime,\n        timeLeft,\n        cycleCount\n      });\n    }\n  }, [timeLeft]);\n  const strokeDasharray = 706.86; // Circumference of the circle\n  const strokeDashoffset = strokeDasharray - strokeDasharray * calculateProgress() / 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"250px\",\n      height: \"250px\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"250\",\n      height: \"250\",\n      viewBox: \"0 0 250 250\",\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"125\",\n        cy: \"125\",\n        r: \"112.5\" // Increased radius by 25%\n        ,\n        fill: \"none\",\n        stroke: \"#e0e0e0\",\n        strokeWidth: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"125\",\n        cy: \"125\",\n        r: \"112.5\" // Increased radius by 25%\n        ,\n        fill: \"none\",\n        stroke: strokeColor // Use the stroke color from props\n        ,\n        strokeWidth: \"10\",\n        strokeDasharray: strokeDasharray // Updated for new radius\n        ,\n        strokeDashoffset: strokeDashoffset // Updated stroke offset\n        ,\n        transform: \"rotate(-90 125 125)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          margin: 0\n        },\n        children: formatTime(timeLeft)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: \"5px 0\"\n        },\n        children: isWorkTime ? \"Work\" : \"Break\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTimer,\n        style: {\n          backgroundColor: \"#593773\",\n          // Button background color\n          color: \"#fff\",\n          // Button text color\n          padding: \"10px 20px\",\n          // Button padding\n          border: \"none\",\n          // No border\n          borderRadius: \"5px\",\n          // Rounded corners\n          cursor: \"pointer\" // Pointer cursor on hover\n        },\n        children: isRunning ? \"Pause\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(PomodoroTimer, \"BfHOP88ExRjU31pJhAjBQwr5D68=\");\n_c = PomodoroTimer;\nexport default _c2 = withStreamlitConnection(PomodoroTimer);\nvar _c, _c2;\n$RefreshReg$(_c, \"PomodoroTimer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","Streamlit","withStreamlitConnection","jsxDEV","_jsxDEV","PomodoroTimer","props","_s","work_duration","break_duration","strokeColor","args","isRunning","setIsRunning","isWorkTime","setIsWorkTime","timeLeft","setTimeLeft","cycleCount","setCycleCount","maxCycles","setFrameHeight","interval","setInterval","prevTime","prevCount","prev","clearInterval","setComponentValue","toggleTimer","formatTime","seconds","mins","Math","floor","secs","toString","padStart","calculateProgress","totalTime","strokeDasharray","strokeDashoffset","style","width","height","position","children","viewBox","cx","cy","r","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","transform","top","left","textAlign","margin","onClick","backgroundColor","color","padding","border","borderRadius","cursor","_c","_c2","$RefreshReg$"],"sources":["C:/repos/streamlit_pomodoro/pomodoro/frontend/src/PomodoroTimer.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\n\r\nconst PomodoroTimer = (props: ComponentProps) => {\r\n  const { work_duration, break_duration, strokeColor } = props.args\r\n  const [isRunning, setIsRunning] = useState(false)\r\n  const [isWorkTime, setIsWorkTime] = useState(true)\r\n  const [timeLeft, setTimeLeft] = useState(work_duration * 60 * 10) // Store time in tenths of a second\r\n  const [cycleCount, setCycleCount] = useState(0)\r\n  const maxCycles = 4 // Set the maximum number of cycles\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n  })\r\n\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout | null = null\r\n    if (isRunning) {\r\n      interval = setInterval(() => {\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            if (isWorkTime) {\r\n              setCycleCount((prevCount) => prevCount + 1)\r\n            }\r\n            setIsWorkTime((prev) => !prev)\r\n            return isWorkTime ? break_duration * 60 : work_duration * 60\r\n          }\r\n          return prevTime - 1 // Decrement by 1 second\r\n        })\r\n      }, 1000) // Update every 1000 milliseconds (1 second)\r\n    } else if (interval) {\r\n      clearInterval(interval)\r\n    }\r\n    return () => {\r\n      if (interval) clearInterval(interval)\r\n    }\r\n  }, [isRunning, isWorkTime, work_duration, break_duration])\r\n\r\n  useEffect(() => {\r\n    if (cycleCount >= maxCycles) {\r\n      setIsRunning(false) // Stop the timer after max cycles\r\n      Streamlit.setComponentValue({ isRunning, isWorkTime, timeLeft, cycleCount })\r\n    }\r\n  }, [cycleCount])\r\n\r\n  const toggleTimer = () => {\r\n    setIsRunning((prev) => !prev)\r\n    // Send the state to the server when the timer is toggled\r\n    Streamlit.setComponentValue({ isRunning, isWorkTime, timeLeft, cycleCount })\r\n  }\r\n\r\n  const formatTime = (seconds: number) => {\r\n    const mins = Math.floor(seconds / 60)\r\n    const secs = seconds % 60\r\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`\r\n  }\r\n\r\n  const calculateProgress = () => {\r\n    const totalTime = isWorkTime ? work_duration * 60 : break_duration * 60;\r\n    return ((totalTime - timeLeft) / totalTime) * 100;\r\n  };\r\n\r\n  // Send the state to the server when the timer ends\r\n  useEffect(() => {\r\n    if (timeLeft <= 0) {\r\n      Streamlit.setComponentValue({ isRunning, isWorkTime, timeLeft, cycleCount });\r\n    }\r\n  }, [timeLeft]);\r\n\r\n  const strokeDasharray = 706.86; // Circumference of the circle\r\n  const strokeDashoffset = strokeDasharray - (strokeDasharray * calculateProgress()) / 100;\r\n\r\n  return (\r\n    <div style={{ width: \"250px\", height: \"250px\", position: \"relative\" }}>\r\n      <svg width=\"250\" height=\"250\" viewBox=\"0 0 250 250\">\r\n        <circle\r\n          cx=\"125\"\r\n          cy=\"125\"\r\n          r=\"112.5\" // Increased radius by 25%\r\n          fill=\"none\"\r\n          stroke=\"#e0e0e0\"\r\n          strokeWidth=\"10\"\r\n        />\r\n        <circle\r\n          cx=\"125\"\r\n          cy=\"125\"\r\n          r=\"112.5\" // Increased radius by 25%\r\n          fill=\"none\"\r\n          stroke={strokeColor} // Use the stroke color from props\r\n          strokeWidth=\"10\"\r\n          strokeDasharray={strokeDasharray} // Updated for new radius\r\n          strokeDashoffset={strokeDashoffset} // Updated stroke offset\r\n          transform=\"rotate(-90 125 125)\"\r\n        />\r\n      </svg>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <h2 style={{ margin: 0 }}>{formatTime(timeLeft)}</h2>\r\n        <p style={{ margin: \"5px 0\" }}>{isWorkTime ? \"Work\" : \"Break\"}</p>\r\n        <button\r\n          onClick={toggleTimer}\r\n          style={{\r\n            backgroundColor: \"#593773\", // Button background color\r\n            color: \"#fff\", // Button text color\r\n            padding: \"10px 20px\", // Button padding\r\n            border: \"none\", // No border\r\n            borderRadius: \"5px\", // Rounded corners\r\n            cursor: \"pointer\", // Pointer cursor on hover\r\n          }}\r\n        >\r\n          {isRunning ? \"Pause\" : \"Start\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStreamlitConnection(PomodoroTimer)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}